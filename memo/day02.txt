# 요청 방식
  클라이언트가 입력한 데이터를 서버에 보내는 여러 방법이 있다.
  대표적인 방식이 get과 post이다.

- GET
	주소(URL)에 데이터를 추가하여 전달하는 방식
	쿼리 스트링 사용한다.
	주소에 데이터가 추가되므로 길이에 제한이 있으며, 데이터가 노출되므로
	보안상 취약하지만 빠르다는 장점이 있다.
	
	* 쿼리 스트링
	주소 뒤에 ?로 시작하는 문자열
	주소?parameter=value&parameter=value&....

- POST
	데이터를 주소가 아닌 요청(req) 바디영역에 저장하여 전송한다.
	데이터 길이에 제한이 있지만 GET방식보다 대용량의 데이터를 전송할 수 있다.
	보안상 GET방식보다 상대적으로 좋지만 다른 보안처리를 하지않으면 여전히 취약하다.
	상대적으로 느리다.

GET, POST 언제 사용하는가?
	- 데이터의 양이 적으며, 주소에 노출되어도 상관없는 데이터라면 GET
	ex) 게시판 페이지 정보, 카테고리 정보...
	- 데이터의 양이 많거나, 민감한 데이터를 포함하고 있다면 POST방식
	ex) 로그인, 회원가입, 글쓰기 정보(길어서)...

forward와 redirect
  서버에서 클라이언트 화면의 페이지를 전환시키는 방식
  
1. forward
	request.getRequestDispatcher("파일경로").forward(req, rewp);
	요청과 응답을 가지고 특정 파일경로에 이동한다.
	요청에 저장된 데이터를 유지한 상태로 해당 파일에 데이터를 채워넣어 
	완성된 HTML을 rewp에 담아 클라이언트에게 보낸다.

2. redirect
	resp.sendRedirect("URL경로");
	사용자에게 특정 URL주소를 보내준다.
	클라이언트의 브라우저는 redirect를 받게 되면 해당 url로 재요청을 보낸다.
	즉, 요청과 응답을 2번 주고받는다.
	응답을 유지하지 않고 버리기때문에 사용자가 보낸 데이터는 날아간다.

	사용자에게 민감한 정보를 입력받은 후 redirect를 사용하면
	해당 데이터를 버릴 수 있다.
	ex) 결제 정보, 회원가입 정보, 로그인 정보...
	그 외에는 forward를 사용한다.
     
=============================================================================







